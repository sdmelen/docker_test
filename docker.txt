1. nginx (произносится как «engine-x») - это обратный прокси-сервер с открытым исходным кодом для протоколов HTTP, HTTPS и т.д.
nginx также используется, как балансировщик нагрузки, веб-сервер и для кеширования HTTP.
В проекте nginx уделяется особое внимание высокому параллелизму, высокой производительности и низкому использованию памяти.
У nginx есть один главный и несколько рабочих процессов.
Основная задача главного процесса — чтение и проверка конфигурации и управление рабочими процессами.
Рабочие процессы выполняют фактическую обработку запросов.

ps - это сокращенное от английского слова "Process Status".

docker run -p 80:80 -p 443:443 nginx:latest
Это команда говорит Docker:

Создать новый контейнер из образа nginx:latest
Перемаппировать порт 80 на хосте на порт 80 внутри контейнера
Перемаппировать порт 443 на хосте на порт 443 внутри контейнера
После выполнения этой команды:

Ваш контейнер будет доступен по http://localhost:80 и https://localhost:443
Внутри контейнера эти порты будут доступны под номера 80 и 443 соответственно

events {}:
Этот блок определяет поведение обработки событий (асинхронных операций).
В данном случае он пуст, что означает, что Nginx будет использовать стандартные настройки.
http { ... }:
Этот блок содержит глобальные настройки HTTP-сервера.
server { ... }:
Этот блок определяет сервер, который будет обслуживать все входящие запросы.
location /status { ... }:
Этот блок настраивает обработку запросов, направленных на URL /status.
stub_status on;:
Включает статистику сервера.
При этом настройке Nginx будет предоставлять статистические данные о работе сервера.
access_log off;:
Отключает запись лога доступа для этого сервера.
Это может быть полезно для тестирования или в продакшене, когда нет необходимости в трекинге каждого запроса.
allow 127.0.0.1;:
Разрешает доступ к статистике только из локального IP-адреса (127.0.0.1).

2.



3.
while (FCGI_Accept() >= 0) {
Функция FCGI_Accept() ожидает следующий запрос FastCGI.
Цикл продолжается до тех пор, пока запросы приходят.

printf("Content-type: text/html\r\n"
       "\r\n"
       "<html>\n"
       "<head>\n"
       "<title>Hello World!</title>\n"
       "</head>\n"
       "<body>\n"
       "<h1>Hello World!</h1>\n"
       "</body>\n"
       "</html>\n");
Этот фрагмент кода генерирует HTML-ответ на HTTP-запрос. Давайте разберем его по частям:

"Content-type: text/html\r\n"
Это заголовок HTTP, который указывает, что ответ будет содержать HTML-код.
\r\n - символы перевода строки, обязательные для правильной форматирования HTTP-заголовков.
"\r\n"
Два символа перевода строки, разделяющие заголовок от тела сообщения.
"<html>\n"
Открывается тег <html>, начинающий структуру HTML-документа.
"<head>\n"
Открывается тег <head>, который содержит метаданные документа.
"<title>Hello World!</title>\n"
Определяет заголовок страницы, который отображается в закладках браузера.
"</head>\n"
Закрывается тег <head>.
"<body>\n"
Открывается тег <body>, содержащий содержимое страницы.
"<h1>Hello World!</h1>\n"
Создает заголовок уровня 1 с текстом "Hello World!".
"</body>\n"
Закрывается тег <body>.
"</html>\n"
Закрывается тег <html>.
"\n"
Последний символ новой строки, завершающий тело сообщения.
\r перемещает курсор (каретку) в начало текущей строки без перехода на новую строку.

fastcgi_pass 127.0.0.1:8080;
Это указывает Nginx, куда перенаправлять запросы FastCGI.
127.0.0.1 - это локальный IP-адрес.
8080 - это порт, на котором запущен скрипт FastCGI.

Этот конфигурационный файл создает сервер Nginx, который:
-Слушает порт 81.
-Обрабатывает все запросы, направленные на корневой URL ("/").
-Передает эти запросы на FastCGI-сервер, работающий на localhost через порт 8080.
Когда клиент отправляет запрос на http://localhost:81/, Nginx будет принимать этот запрос и перенаправлять его на FastCGI-сервер.
FastCGI-сервер затем обрабатывает запрос и отправляет ответ обратно Nginx.
Nginx, в свою очередь, отправляет этот ответ клиенту.
4.




5.

Эта команда выполняется в контейнере Docker и выполняет несколько операций по управлению правами доступа (chown):

chown -R nginx:nginx /home/part5;
Изменяет владельца и группу владельца директории /home/part5 и всех её поддиректорий на пользователя и группу nginx.
-R означает recursive (рекурсивное применение), то есть изменения применяются ко всем подкаталогам.
chown -R nginx:nginx /etc/nginx/nginx.conf;
То же самое, но для файла конфигурации Nginx.
chown -R nginx:nginx /var/cache/nginx;
Изменяет владельца и группу для директории кэша Nginx.
touch /var/run/nginx.pid;
Создает пустой файл в директории /var/run/nginx.pid.
chown -R nginx:nginx /var/run/nginx.pid
Изменяет владельца и группу созданного файла на nginx.
Объяснение цели этих действий:

Все эти операции изменяют владельца и группу владельца файлов и директорий Nginx на пользователя nginx.
Это обеспечивает правильную работу Nginx внутри Docker-контейнера.
Пользователь nginx обычно используется для запуска веб-серверов в Linux-системах.
Важно отметить:

Эта команда выполняется в контексте Dockerfile, что означает, что все эти изменения применяются к файлам внутри образа Docker.
После выполнения этих команд, пользователь nginx будет иметь необходимые права для работы с Nginx в контейнере.
Создание файла /var/run/nginx.pid и изменение его владельца - это стандартная практика для запуска Nginx в Linux-системах, что помогает управлять процессом Nginx.

6.


services:
  part5:
    build: ../part_5
  proxy:
    build: .
    ports:
      - 80:8080
Этот фрагмент определяет два сервиса в вашем docker-compose проекте:

part5:
Этот сервис использует Dockerfile из родительской директории (../part_5).
Образ будет собран из этого Dockerfile.
proxy:
Этот сервис использует Dockerfile из текущей директории (.).
Он также настраивает порты:
Локальный порт 80 будет мапиться на порт 8080 внутри контейнера.


